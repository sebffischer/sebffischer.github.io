[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sebffischer.github.io",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJan 26, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultiple Dispatch with S3\n\n\n\n\n\nExploring the S3 class system in R\n\n\n\n\n\n\nJan 26, 2023\n\n\nSebastian Fischer\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 23, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/nested_s3/index.html",
    "href": "posts/nested_s3/index.html",
    "title": "Multiple Dispatch with S3",
    "section": "",
    "text": "R has different class systems that allow for object-oriented programming in the language. The simplest of which is the S3 system, which selects a method for an object depending on its class.\nIn the simple example above, we write a generic function scream() that does something different for numerics and for characters.\n\n\n\n\nscream = function(x) {\n  UseMethod(\"scream\")\n}\n\nscream.numeric = function(x) {\n  print(\"THIS IS A NUMBER!!!\")\n}\n\nscream.character = function(x) {\n  print(\"THIS IS A CHARACTER!!!\")\n}\n\nscream(1)\n#> [1] \"THIS IS A NUMBER!!!\"\n\nscream(\"1\")\n#> [1] \"THIS IS A CHARACTER!!!\"\n\nHowever, the S3 class system only allows for single dispatch, meaning that only the class of one object - by default the first argument - is used to select the method. There can be cases, where it makes sense to dispatch on two elements. The S4 class system - the successor of S3 - for example allows this. Implementing multiple dispatch is however also possible using only S3.\nWe might want to change our generic function above to take in two arguments x and y and scream something depending on both of their classes. The neat trick that we will use for that is that of nested S3 functions. We then let the first dispatch happen on the class of the first argument and the second dispatch uses the class of the second element. I was made aware of this construct when reading the debugadapter implementation for R.\n\nscream2 = function(x, y) {\n  UseMethod(\"scream2\")\n}\n\nscream2.numeric = function(x, y) {\n  UseMethod(\"scream2.numeric\", y)\n}\n\nscream2.character = function(x, y) {\n  UseMethod(\"scream2.character\", y)\n}\n\nscream2.numeric.character = function(x, y) {\n  print(\"THIS IS A numeric AND A CHARACTER!\")\n}\n\nscream2.character.numeric = function(x, y) { \n  print(\"THIS IS A CHARACTER AND AN NUMERIC!\")\n}\n\nscream2.numeric.numeric = function(x, y) {\n  print(\"THESE ARE TWO NUMERICS!\")\n}\n\nscream2.character.character = function(x, y) {\n  print(\"THESE ARE TWO CHARACTERS!\")\n}\n\nscream2(1, \"1\")\n#> [1] \"THIS IS A numeric AND A CHARACTER!\"\nscream2(\"1\", 1)\n#> [1] \"THIS IS A CHARACTER AND AN NUMERIC!\"\nscream2(1, 1)\n#> [1] \"THESE ARE TWO NUMERICS!\"\nscream2(\"1\", \"1\")\n#> [1] \"THESE ARE TWO CHARACTERS!\"\n\nSo, what could go wrong by doing so? Because of the way S3 works, i.e. the names of the methods have the form <generic>.<class> the function names that we have used above are ambiguous. If someone decides to create an object of class \"character.character\" we have accidentally also created a method for this class.\n\nweird_object = structure(list(), class = \"character.character\")\n\nscream2(weird_object)\n#> [1] \"THESE ARE TWO CHARACTERS!\""
  }
]