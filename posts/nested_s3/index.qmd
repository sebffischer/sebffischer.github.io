***

title: "Multiple Dispatch with S3"
description: "Exploring the S3 class system in R"
author: "Sebastian Fischer"
date: "1/26/2023"
-----------------

R has different class systems that allow for object-oriented programming in the language.
The simplest of which is the S3 system, which selects a method for an object depending on its class.

In the simple example above, we write a generic function `scream()` that does something different for numerics and for
characters.

```{r}
#| output: false
#| echo: false
knitr::opts_chunk$set(
  comment = "#>",
  collapse = TRUE
  # cache = TRUE
  # fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
  # dpi = 300,
  # out.width = "70%",
  # fig.align = 'center',
  # fig.width = 6,
  # fig.asp = 0.618,  # 1 / phi
  # fig.show = "hold"
)
```

```{r}
#| eval: true
scream = function(x) {
  UseMethod("scream")
}

scream.numeric = function(x) {
  print("THIS IS A NUMBER!!!")
}

scream.character = function(x) {
  print("THIS IS A CHARACTER!!!")
}

scream(1)

scream("1")
```

However, the S3 class system only allows for single dispatch, meaning that only the class of one object - by
default the first argument - is used to select the method.
There can be cases, where it makes sense to dispatch on two elements.
The S4 class system - the successor of S3 - for example allows this.
Implementing multiple dispatch is however also possible using only S3.

We might want to change our generic function above to take in two arguments `x` and `y` and scream something depending
on both of their classes. To do so, we will nest S3 methods. We let the first dispatch happen on the class of the
first argument and the second dispatch uses the class of the second element.
I was made aware of this construct when reading the [debugadapter implementation](https://github.com/dgkf/debugadapter)
for R.

```{r}
scream2 = function(x, y) {
  UseMethod("scream2")
}

scream2.numeric = function(x, y) {
  UseMethod("scream2.numeric", y)
}

scream2.character = function(x, y) {
  UseMethod("scream2.character", y)
}

scream2.numeric.character = function(x, y) {
  print("THIS IS A numeric AND A CHARACTER!")
}

scream2.character.numeric = function(x, y) { 
  print("THIS IS A CHARACTER AND AN NUMERIC!")
}

scream2.numeric.numeric = function(x, y) {
  print("THESE ARE TWO NUMERICS!")
}

scream2.character.character = function(x, y) {
  print("THESE ARE TWO CHARACTERS!")
}

scream2(1, "1")
scream2("1", 1)
scream2(1, 1)
scream2("1", "1")
```

So, what could go wrong by doing so?
Because of the way S3 works, i.e. the names of the methods have the form `<generic>.<class>` the function names that
we have used above are ambiguous. If someone decides to create an object of class `"character.character"` we have
accidentally also created a method for this class.

```{r}
weird_object = structure(list(), class = "character.character")

scream2(weird_object)
```
